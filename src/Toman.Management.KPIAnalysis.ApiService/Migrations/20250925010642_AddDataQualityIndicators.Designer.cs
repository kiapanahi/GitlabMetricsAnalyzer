// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Data;

#nullable disable

namespace Toman.Management.KPIAnalysis.ApiService.Migrations
{
    [DbContext(typeof(GitLabMetricsDbContext))]
    [Migration("20250925010642_AddDataQualityIndicators")]
    partial class AddDataQualityIndicators
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Dimensions.DimBranch", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("Branch")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("branch");

                    b.Property<bool>("ProtectedFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("protected_flag");

                    b.HasKey("ProjectId", "Branch");

                    b.ToTable("dim_branch", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Dimensions.DimRelease", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("TagName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_name");

                    b.Property<DateTimeOffset>("ReleasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("released_at");

                    b.Property<bool>("SemverValid")
                        .HasColumnType("boolean")
                        .HasColumnName("semver_valid");

                    b.HasKey("ProjectId", "TagName");

                    b.ToTable("dim_release", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Dimensions.DimUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("email");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("dim_user", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactGitHygiene", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date")
                        .HasColumnName("day");

                    b.Property<int>("DirectPushesDefault")
                        .HasColumnType("integer")
                        .HasColumnName("direct_pushes_default");

                    b.Property<int>("ForcePushesProtected")
                        .HasColumnType("integer")
                        .HasColumnName("force_pushes_protected");

                    b.Property<int>("UnsignedCommitCount")
                        .HasColumnType("integer")
                        .HasColumnName("unsigned_commit_count");

                    b.HasKey("ProjectId", "Day");

                    b.ToTable("fact_git_hygiene", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactMergeRequest", b =>
                {
                    b.Property<long>("MrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MrId"));

                    b.Property<decimal>("CycleTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cycle_time_hours");

                    b.Property<int>("LinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("lines_added");

                    b.Property<int>("LinesRemoved")
                        .HasColumnType("integer")
                        .HasColumnName("lines_removed");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<decimal>("ReviewWaitHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("review_wait_hours");

                    b.Property<int>("ReworkCount")
                        .HasColumnType("integer")
                        .HasColumnName("rework_count");

                    b.HasKey("MrId");

                    b.ToTable("fact_mr", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactPipeline", b =>
                {
                    b.Property<int>("PipelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pipeline_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PipelineId"));

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<bool>("IsFlakyCandidate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_flaky_candidate");

                    b.Property<bool>("IsProd")
                        .HasColumnType("boolean")
                        .HasColumnName("is_prod");

                    b.Property<bool>("IsRollback")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rollback");

                    b.Property<int>("MtgSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("mtg_seconds");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("PipelineId");

                    b.ToTable("fact_pipeline", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactRelease", b =>
                {
                    b.Property<string>("TagName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("CadenceBucket")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cadence_bucket");

                    b.Property<bool>("IsSemver")
                        .HasColumnType("boolean")
                        .HasColumnName("is_semver");

                    b.HasKey("TagName", "ProjectId");

                    b.ToTable("fact_release", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactUserMetrics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ActiveProjects")
                        .HasColumnType("integer")
                        .HasColumnName("active_projects");

                    b.Property<double>("AverageCommitsPerDay")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_commits_per_day");

                    b.Property<double>("AverageIssueResolutionTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_issue_resolution_time_hours");

                    b.Property<double>("AverageLinesChangedPerCommit")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_lines_changed_per_commit");

                    b.Property<double>("AverageMergeRequestCycleTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_merge_request_cycle_time_hours");

                    b.Property<double>("AveragePipelineDurationMinutes")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_pipeline_duration_minutes");

                    b.Property<double>("CodeChurnRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("code_churn_rate");

                    b.Property<double>("CollaborationScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("collaboration_score");

                    b.Property<DateTimeOffset>("CollectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("collected_at");

                    b.Property<string>("DataQuality")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_quality");

                    b.Property<string>("DataQualityWarnings")
                        .HasColumnType("text")
                        .HasColumnName("data_quality_warnings");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int>("FailedPipelines")
                        .HasColumnType("integer")
                        .HasColumnName("failed_pipelines");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<double>("MergeRequestMergeRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("merge_request_merge_rate");

                    b.Property<string>("MetricQualityJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metric_quality_json");

                    b.Property<double>("OverallConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("overall_confidence_score");

                    b.Property<int>("PeriodDays")
                        .HasColumnType("integer")
                        .HasColumnName("period_days");

                    b.Property<double>("PipelineSuccessRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("pipeline_success_rate");

                    b.Property<string>("ProductivityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("productivity_level");

                    b.Property<double>("ProductivityScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("productivity_score");

                    b.Property<double>("ReviewThroughput")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("review_throughput");

                    b.Property<int>("SuccessfulPipelines")
                        .HasColumnType("integer")
                        .HasColumnName("successful_pipelines");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.Property<int>("TotalCommentsOnIssues")
                        .HasColumnType("integer")
                        .HasColumnName("total_comments_on_issues");

                    b.Property<int>("TotalCommentsOnMergeRequests")
                        .HasColumnType("integer")
                        .HasColumnName("total_comments_on_merge_requests");

                    b.Property<int>("TotalCommits")
                        .HasColumnType("integer")
                        .HasColumnName("total_commits");

                    b.Property<int>("TotalDataPoints")
                        .HasColumnType("integer")
                        .HasColumnName("total_data_points");

                    b.Property<int>("TotalIssuesAssigned")
                        .HasColumnType("integer")
                        .HasColumnName("total_issues_assigned");

                    b.Property<int>("TotalIssuesClosed")
                        .HasColumnType("integer")
                        .HasColumnName("total_issues_closed");

                    b.Property<int>("TotalIssuesCreated")
                        .HasColumnType("integer")
                        .HasColumnName("total_issues_created");

                    b.Property<int>("TotalLinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("total_lines_added");

                    b.Property<int>("TotalLinesChanged")
                        .HasColumnType("integer")
                        .HasColumnName("total_lines_changed");

                    b.Property<int>("TotalLinesDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("total_lines_deleted");

                    b.Property<int>("TotalMergeRequestsCreated")
                        .HasColumnType("integer")
                        .HasColumnName("total_merge_requests_created");

                    b.Property<int>("TotalMergeRequestsMerged")
                        .HasColumnType("integer")
                        .HasColumnName("total_merge_requests_merged");

                    b.Property<int>("TotalMergeRequestsReviewed")
                        .HasColumnType("integer")
                        .HasColumnName("total_merge_requests_reviewed");

                    b.Property<int>("TotalPipelinesTriggered")
                        .HasColumnType("integer")
                        .HasColumnName("total_pipelines_triggered");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CollectedAt")
                        .HasDatabaseName("idx_fact_user_metrics_collected_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_fact_user_metrics_user_id");

                    b.HasIndex("UserId", "CollectedAt")
                        .HasDatabaseName("idx_fact_user_metrics_user_collected");

                    b.HasIndex("UserId", "FromDate", "ToDate")
                        .HasDatabaseName("idx_fact_user_metrics_user_period");

                    b.ToTable("fact_user_metrics", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Operational.IngestionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity");

                    b.Property<DateTimeOffset>("LastRunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_at");

                    b.Property<DateTimeOffset>("LastSeenUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_updated_at");

                    b.HasKey("Id");

                    b.ToTable("ingestion_state", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawCommit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Additions")
                        .HasColumnType("integer")
                        .HasColumnName("additions");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_email");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<string>("CommitId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("commit_id");

                    b.Property<DateTimeOffset>("CommittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("committed_at");

                    b.Property<int>("Deletions")
                        .HasColumnType("integer")
                        .HasColumnName("deletions");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_signed");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("idx_raw_commit_author");

                    b.HasIndex("CommittedAt")
                        .HasDatabaseName("idx_raw_commit_committed_at");

                    b.HasIndex("IngestedAt")
                        .HasDatabaseName("idx_raw_commit_ingested_at");

                    b.HasIndex("ProjectId", "CommitId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_commit_project_commit");

                    b.ToTable("raw_commit", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawIssue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("IssueId")
                        .HasColumnType("bigint")
                        .HasColumnName("issue_id");

                    b.Property<JsonDocument>("Labels")
                        .HasColumnType("jsonb")
                        .HasColumnName("labels");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<int>("ReopenedCount")
                        .HasColumnType("integer")
                        .HasColumnName("reopened_count");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "IssueId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_issue_project_issue");

                    b.ToTable("raw_issue", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("PipelineId")
                        .HasColumnType("bigint")
                        .HasColumnName("pipeline_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<bool>("RetriedFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("retried_flag");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "JobId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_job_project_job");

                    b.ToTable("raw_job", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawMergeRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ApprovalsGiven")
                        .HasColumnType("integer")
                        .HasColumnName("approvals_given");

                    b.Property<int>("ApprovalsRequired")
                        .HasColumnType("integer")
                        .HasColumnName("approvals_required");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<int>("ChangesCount")
                        .HasColumnType("integer")
                        .HasColumnName("changes_count");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("FirstReviewAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_review_at");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<DateTimeOffset?>("MergedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("merged_at");

                    b.Property<long>("MrId")
                        .HasColumnType("bigint")
                        .HasColumnName("mr_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<string>("ReviewerIds")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_ids");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("source_branch");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("TargetBranch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target_branch");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("idx_raw_mr_author");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_raw_mr_created_at");

                    b.HasIndex("IngestedAt")
                        .HasDatabaseName("idx_raw_mr_ingested_at");

                    b.HasIndex("MergedAt")
                        .HasDatabaseName("idx_raw_mr_merged_at");

                    b.HasIndex("State")
                        .HasDatabaseName("idx_raw_mr_state");

                    b.HasIndex("ProjectId", "MrId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_mr_project_mr");

                    b.ToTable("raw_mr", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawPipeline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<string>("Environment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("environment");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<long>("PipelineId")
                        .HasColumnType("bigint")
                        .HasColumnName("pipeline_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<string>("Ref")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("sha");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TriggerSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trigger_source");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("idx_raw_pipeline_author");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_raw_pipeline_created_at");

                    b.HasIndex("IngestedAt")
                        .HasDatabaseName("idx_raw_pipeline_ingested_at");

                    b.HasIndex("Ref")
                        .HasDatabaseName("idx_raw_pipeline_ref");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_raw_pipeline_status");

                    b.HasIndex("ProjectId", "PipelineId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_pipeline_project_pipeline");

                    b.ToTable("raw_pipeline", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

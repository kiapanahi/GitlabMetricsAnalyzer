// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Data;

#nullable disable

namespace Toman.Management.KPIAnalysis.ApiService.Migrations
{
    [DbContext(typeof(GitLabMetricsDbContext))]
    [Migration("20250927091225_AddWindowedCollectionSupport")]
    partial class AddWindowedCollectionSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Dimensions.DimBranch", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("Branch")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("branch");

                    b.Property<bool>("ProtectedFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("protected_flag");

                    b.HasKey("ProjectId", "Branch");

                    b.ToTable("dim_branch", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Dimensions.DimUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("email");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("dim_user", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.CommitFact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CommittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("committed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DeveloperId")
                        .HasColumnType("bigint")
                        .HasColumnName("developer_id");

                    b.Property<int>("FilesChanged")
                        .HasColumnType("integer")
                        .HasColumnName("files_changed");

                    b.Property<bool>("IsMergeCommit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_merge_commit");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_signed");

                    b.Property<int>("LinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("lines_added");

                    b.Property<int>("LinesDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("lines_deleted");

                    b.Property<int>("ParentCount")
                        .HasColumnType("integer")
                        .HasColumnName("parent_count");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("sha");

                    b.HasKey("Id");

                    b.HasIndex("CommittedAt")
                        .HasDatabaseName("idx_commit_facts_committed_at");

                    b.HasIndex("DeveloperId")
                        .HasDatabaseName("idx_commit_facts_developer_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("idx_commit_facts_project_id");

                    b.HasIndex("ProjectId", "Sha")
                        .IsUnique()
                        .HasDatabaseName("idx_commit_facts_project_sha");

                    b.ToTable("commit_facts", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<long>("GitLabUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("gitlab_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("primary_email");

                    b.Property<string>("PrimaryUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("primary_username");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GitLabUserId")
                        .IsUnique()
                        .HasDatabaseName("idx_developers_gitlab_user_id");

                    b.HasIndex("PrimaryEmail")
                        .IsUnique()
                        .HasDatabaseName("idx_developers_primary_email");

                    b.ToTable("developers", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.DeveloperAlias", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AliasType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alias_type");

                    b.Property<string>("AliasValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias_value");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DeveloperId")
                        .HasColumnType("bigint")
                        .HasColumnName("developer_id");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.HasKey("Id");

                    b.HasIndex("AliasValue")
                        .HasDatabaseName("idx_developer_aliases_value");

                    b.HasIndex("DeveloperId")
                        .HasDatabaseName("idx_developer_aliases_developer_id");

                    b.HasIndex("AliasValue", "AliasType")
                        .IsUnique()
                        .HasDatabaseName("idx_developer_aliases_value_type");

                    b.ToTable("developer_aliases", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.DeveloperMetricsAggregate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AvgCycleTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("avg_cycle_time_hours");

                    b.Property<DateTimeOffset>("CalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculated_at");

                    b.Property<int>("CommitsCount")
                        .HasColumnType("integer")
                        .HasColumnName("commits_count");

                    b.Property<long>("DeveloperId")
                        .HasColumnType("bigint")
                        .HasColumnName("developer_id");

                    b.Property<int>("FilesChanged")
                        .HasColumnType("integer")
                        .HasColumnName("files_changed");

                    b.Property<int>("LinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("lines_added");

                    b.Property<int>("LinesDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("lines_deleted");

                    b.Property<int>("MrsCreated")
                        .HasColumnType("integer")
                        .HasColumnName("mrs_created");

                    b.Property<int>("MrsMerged")
                        .HasColumnType("integer")
                        .HasColumnName("mrs_merged");

                    b.Property<int>("MrsReviewed")
                        .HasColumnType("integer")
                        .HasColumnName("mrs_reviewed");

                    b.Property<DateOnly>("PeriodEnd")
                        .HasColumnType("date")
                        .HasColumnName("period_end");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date")
                        .HasColumnName("period_start");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("period_type");

                    b.Property<decimal?>("PipelineSuccessRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("pipeline_success_rate");

                    b.Property<int>("PipelinesTriggered")
                        .HasColumnType("integer")
                        .HasColumnName("pipelines_triggered");

                    b.Property<int>("ReviewsGiven")
                        .HasColumnType("integer")
                        .HasColumnName("reviews_given");

                    b.Property<int>("SuccessfulPipelines")
                        .HasColumnType("integer")
                        .HasColumnName("successful_pipelines");

                    b.Property<int>("UniqueCollaborators")
                        .HasColumnType("integer")
                        .HasColumnName("unique_collaborators");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId")
                        .HasDatabaseName("idx_dev_metrics_agg_developer");

                    b.HasIndex("PeriodType", "PeriodStart")
                        .HasDatabaseName("idx_dev_metrics_agg_period");

                    b.HasIndex("DeveloperId", "PeriodType", "PeriodStart")
                        .IsUnique()
                        .HasDatabaseName("idx_dev_metrics_agg_developer_period");

                    b.ToTable("developer_metrics_aggregates", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.MergeRequestFact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorDeveloperId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_developer_id");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<int>("CommitsCount")
                        .HasColumnType("integer")
                        .HasColumnName("commits_count");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("CreatedAtFact")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_fact");

                    b.Property<decimal?>("CycleTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cycle_time_hours");

                    b.Property<int>("FilesChanged")
                        .HasColumnType("integer")
                        .HasColumnName("files_changed");

                    b.Property<DateTimeOffset?>("FirstReviewAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_review_at");

                    b.Property<bool>("HasConflicts")
                        .HasColumnType("boolean")
                        .HasColumnName("has_conflicts");

                    b.Property<bool>("HasPipeline")
                        .HasColumnType("boolean")
                        .HasColumnName("has_pipeline");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsWip")
                        .HasColumnType("boolean")
                        .HasColumnName("is_wip");

                    b.Property<int>("LinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("lines_added");

                    b.Property<int>("LinesDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("lines_deleted");

                    b.Property<DateTimeOffset?>("MergedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("merged_at");

                    b.Property<int>("MrIid")
                        .HasColumnType("integer")
                        .HasColumnName("mr_iid");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<decimal?>("ReviewTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("review_time_hours");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("source_branch");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("TargetBranch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target_branch");

                    b.HasKey("Id");

                    b.HasIndex("AuthorDeveloperId")
                        .HasDatabaseName("idx_merge_request_facts_author");

                    b.HasIndex("MergedAt")
                        .HasDatabaseName("idx_merge_request_facts_merged_at");

                    b.HasIndex("State")
                        .HasDatabaseName("idx_merge_request_facts_state");

                    b.HasIndex("ProjectId", "MrIid")
                        .IsUnique()
                        .HasDatabaseName("idx_merge_request_facts_project_iid");

                    b.ToTable("merge_request_facts", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.PipelineFact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("CreatedAtFact")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_fact");

                    b.Property<long>("DeveloperId")
                        .HasColumnType("bigint")
                        .HasColumnName("developer_id");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<long?>("MergeRequestFactId")
                        .HasColumnType("bigint")
                        .HasColumnName("merge_request_fact_id");

                    b.Property<long>("PipelineId")
                        .HasColumnType("bigint")
                        .HasColumnName("pipeline_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("RefName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref_name");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("sha");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_pipeline_facts_created_at");

                    b.HasIndex("DeveloperId")
                        .HasDatabaseName("idx_pipeline_facts_developer_id");

                    b.HasIndex("MergeRequestFactId")
                        .HasDatabaseName("idx_pipeline_facts_merge_request");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_pipeline_facts_status");

                    b.HasIndex("ProjectId", "PipelineId")
                        .IsUnique()
                        .HasDatabaseName("idx_pipeline_facts_project_pipeline");

                    b.ToTable("pipeline_facts", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultBranch")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("default_branch");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PathWithNamespace")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("path_with_namespace");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VisibilityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("visibility_level");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("web_url");

                    b.HasKey("Id");

                    b.HasIndex("Archived")
                        .HasDatabaseName("idx_projects_archived");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_projects_created_at");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_projects_name");

                    b.HasIndex("PathWithNamespace")
                        .IsUnique()
                        .HasDatabaseName("idx_projects_path");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.ReviewEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("event_type");

                    b.Property<long>("MergeRequestFactId")
                        .HasColumnType("bigint")
                        .HasColumnName("merge_request_fact_id");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<long>("ReviewerDeveloperId")
                        .HasColumnType("bigint")
                        .HasColumnName("reviewer_developer_id");

                    b.HasKey("Id");

                    b.HasIndex("EventType")
                        .HasDatabaseName("idx_review_events_type");

                    b.HasIndex("MergeRequestFactId")
                        .HasDatabaseName("idx_review_events_merge_request");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("idx_review_events_occurred_at");

                    b.HasIndex("ReviewerDeveloperId")
                        .HasDatabaseName("idx_review_events_reviewer");

                    b.ToTable("review_events", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactMergeRequest", b =>
                {
                    b.Property<long>("MrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MrId"));

                    b.Property<decimal>("CycleTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cycle_time_hours");

                    b.Property<int>("LinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("lines_added");

                    b.Property<int>("LinesRemoved")
                        .HasColumnType("integer")
                        .HasColumnName("lines_removed");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<decimal>("ReviewWaitHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("review_wait_hours");

                    b.Property<int>("ReworkCount")
                        .HasColumnType("integer")
                        .HasColumnName("rework_count");

                    b.HasKey("MrId");

                    b.ToTable("fact_mr", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactPipeline", b =>
                {
                    b.Property<int>("PipelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pipeline_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PipelineId"));

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<bool>("IsFlakyCandidate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_flaky_candidate");

                    b.Property<bool>("IsProd")
                        .HasColumnType("boolean")
                        .HasColumnName("is_prod");

                    b.Property<bool>("IsRollback")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rollback");

                    b.Property<int>("MtgSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("mtg_seconds");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("PipelineId");

                    b.ToTable("fact_pipeline", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Facts.FactUserMetrics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ActiveProjects")
                        .HasColumnType("integer")
                        .HasColumnName("active_projects");

                    b.Property<double>("AverageCommitsPerDay")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_commits_per_day");

                    b.Property<double>("AverageIssueResolutionTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_issue_resolution_time_hours");

                    b.Property<double>("AverageLinesChangedPerCommit")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_lines_changed_per_commit");

                    b.Property<double>("AverageMergeRequestCycleTimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_merge_request_cycle_time_hours");

                    b.Property<double>("AveragePipelineDurationMinutes")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("average_pipeline_duration_minutes");

                    b.Property<double>("CodeChurnRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("code_churn_rate");

                    b.Property<double>("CollaborationScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("collaboration_score");

                    b.Property<DateTimeOffset>("CollectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("collected_at");

                    b.Property<string>("DataQuality")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_quality");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int>("FailedPipelines")
                        .HasColumnType("integer")
                        .HasColumnName("failed_pipelines");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<double>("MergeRequestMergeRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("merge_request_merge_rate");

                    b.Property<int>("PeriodDays")
                        .HasColumnType("integer")
                        .HasColumnName("period_days");

                    b.Property<double>("PipelineSuccessRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("pipeline_success_rate");

                    b.Property<string>("ProductivityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("productivity_level");

                    b.Property<double>("ProductivityScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("productivity_score");

                    b.Property<double>("ReviewThroughput")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("review_throughput");

                    b.Property<int>("SuccessfulPipelines")
                        .HasColumnType("integer")
                        .HasColumnName("successful_pipelines");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.Property<int>("TotalCommentsOnIssues")
                        .HasColumnType("integer")
                        .HasColumnName("total_comments_on_issues");

                    b.Property<int>("TotalCommentsOnMergeRequests")
                        .HasColumnType("integer")
                        .HasColumnName("total_comments_on_merge_requests");

                    b.Property<int>("TotalCommits")
                        .HasColumnType("integer")
                        .HasColumnName("total_commits");

                    b.Property<int>("TotalDataPoints")
                        .HasColumnType("integer")
                        .HasColumnName("total_data_points");

                    b.Property<int>("TotalIssuesAssigned")
                        .HasColumnType("integer")
                        .HasColumnName("total_issues_assigned");

                    b.Property<int>("TotalIssuesClosed")
                        .HasColumnType("integer")
                        .HasColumnName("total_issues_closed");

                    b.Property<int>("TotalIssuesCreated")
                        .HasColumnType("integer")
                        .HasColumnName("total_issues_created");

                    b.Property<int>("TotalLinesAdded")
                        .HasColumnType("integer")
                        .HasColumnName("total_lines_added");

                    b.Property<int>("TotalLinesChanged")
                        .HasColumnType("integer")
                        .HasColumnName("total_lines_changed");

                    b.Property<int>("TotalLinesDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("total_lines_deleted");

                    b.Property<int>("TotalMergeRequestsCreated")
                        .HasColumnType("integer")
                        .HasColumnName("total_merge_requests_created");

                    b.Property<int>("TotalMergeRequestsMerged")
                        .HasColumnType("integer")
                        .HasColumnName("total_merge_requests_merged");

                    b.Property<int>("TotalMergeRequestsReviewed")
                        .HasColumnType("integer")
                        .HasColumnName("total_merge_requests_reviewed");

                    b.Property<int>("TotalPipelinesTriggered")
                        .HasColumnType("integer")
                        .HasColumnName("total_pipelines_triggered");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CollectedAt")
                        .HasDatabaseName("idx_fact_user_metrics_collected_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_fact_user_metrics_user_id");

                    b.HasIndex("UserId", "CollectedAt")
                        .HasDatabaseName("idx_fact_user_metrics_user_collected");

                    b.HasIndex("UserId", "FromDate", "ToDate")
                        .HasDatabaseName("idx_fact_user_metrics_user_period");

                    b.ToTable("fact_user_metrics", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Operational.CollectionRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CommitsCollected")
                        .HasColumnType("integer")
                        .HasColumnName("commits_collected");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text")
                        .HasColumnName("error_details");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error_message");

                    b.Property<int>("MergeRequestsCollected")
                        .HasColumnType("integer")
                        .HasColumnName("merge_requests_collected");

                    b.Property<int>("PipelinesCollected")
                        .HasColumnType("integer")
                        .HasColumnName("pipelines_collected");

                    b.Property<int>("ProjectsProcessed")
                        .HasColumnType("integer")
                        .HasColumnName("projects_processed");

                    b.Property<int>("ReviewEventsCollected")
                        .HasColumnType("integer")
                        .HasColumnName("review_events_collected");

                    b.Property<string>("RunType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("run_type");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TriggerSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trigger_source");

                    b.Property<DateTimeOffset?>("WindowEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("window_end");

                    b.Property<int?>("WindowSizeHours")
                        .HasColumnType("integer")
                        .HasColumnName("window_size_hours");

                    b.Property<DateTimeOffset?>("WindowStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("window_start");

                    b.HasKey("Id");

                    b.HasIndex("RunType")
                        .HasDatabaseName("idx_collection_runs_run_type");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("idx_collection_runs_started_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_collection_runs_status");

                    b.HasIndex("RunType", "StartedAt")
                        .HasDatabaseName("idx_collection_runs_type_started");

                    b.ToTable("collection_runs", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Operational.IngestionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity");

                    b.Property<DateTimeOffset>("LastRunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_at");

                    b.Property<DateTimeOffset>("LastSeenUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_updated_at");

                    b.Property<DateTimeOffset?>("LastWindowEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_window_end");

                    b.Property<int?>("WindowSizeHours")
                        .HasColumnType("integer")
                        .HasColumnName("window_size_hours");

                    b.HasKey("Id");

                    b.HasIndex("Entity")
                        .IsUnique()
                        .HasDatabaseName("idx_ingestion_state_entity");

                    b.ToTable("ingestion_state", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawCommit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Additions")
                        .HasColumnType("integer")
                        .HasColumnName("additions");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_email");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<string>("CommitId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("commit_id");

                    b.Property<DateTimeOffset>("CommittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("committed_at");

                    b.Property<int>("Deletions")
                        .HasColumnType("integer")
                        .HasColumnName("deletions");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_signed");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("idx_raw_commit_author");

                    b.HasIndex("CommittedAt")
                        .HasDatabaseName("idx_raw_commit_committed_at");

                    b.HasIndex("IngestedAt")
                        .HasDatabaseName("idx_raw_commit_ingested_at");

                    b.HasIndex("ProjectId", "CommitId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_commit_project_commit");

                    b.ToTable("raw_commit", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("PipelineId")
                        .HasColumnType("bigint")
                        .HasColumnName("pipeline_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<bool>("RetriedFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("retried_flag");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "JobId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_job_project_job");

                    b.ToTable("raw_job", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawMergeRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ApprovalsGiven")
                        .HasColumnType("integer")
                        .HasColumnName("approvals_given");

                    b.Property<int>("ApprovalsRequired")
                        .HasColumnType("integer")
                        .HasColumnName("approvals_required");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<int>("ChangesCount")
                        .HasColumnType("integer")
                        .HasColumnName("changes_count");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("FirstReviewAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_review_at");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<DateTimeOffset?>("MergedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("merged_at");

                    b.Property<long>("MrId")
                        .HasColumnType("bigint")
                        .HasColumnName("mr_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<string>("ReviewerIds")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_ids");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("source_branch");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("TargetBranch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target_branch");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("idx_raw_mr_author");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_raw_mr_created_at");

                    b.HasIndex("IngestedAt")
                        .HasDatabaseName("idx_raw_mr_ingested_at");

                    b.HasIndex("MergedAt")
                        .HasDatabaseName("idx_raw_mr_merged_at");

                    b.HasIndex("State")
                        .HasDatabaseName("idx_raw_mr_state");

                    b.HasIndex("ProjectId", "MrId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_mr_project_mr");

                    b.ToTable("raw_mr", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawMergeRequestNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<long>("MergeRequestIid")
                        .HasColumnType("bigint")
                        .HasColumnName("merge_request_iid");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<string>("NoteableType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("noteable_type");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<bool>("Resolvable")
                        .HasColumnType("boolean")
                        .HasColumnName("resolvable");

                    b.Property<bool>("Resolved")
                        .HasColumnType("boolean")
                        .HasColumnName("resolved");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("resolved_by");

                    b.Property<long?>("ResolvedById")
                        .HasColumnType("bigint")
                        .HasColumnName("resolved_by_id");

                    b.Property<bool>("System")
                        .HasColumnType("boolean")
                        .HasColumnName("system");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("idx_raw_mr_note_author");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_raw_mr_note_created_at");

                    b.HasIndex("ProjectId", "MergeRequestIid")
                        .HasDatabaseName("idx_raw_mr_note_project_mr");

                    b.HasIndex("ProjectId", "NoteId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_mr_note_project_note");

                    b.ToTable("raw_merge_request_note", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Raw.RawPipeline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_name");

                    b.Property<long>("AuthorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<string>("Environment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("environment");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingested_at");

                    b.Property<long>("PipelineId")
                        .HasColumnType("bigint")
                        .HasColumnName("pipeline_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<string>("Ref")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("sha");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TriggerSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trigger_source");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("idx_raw_pipeline_author");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_raw_pipeline_created_at");

                    b.HasIndex("IngestedAt")
                        .HasDatabaseName("idx_raw_pipeline_ingested_at");

                    b.HasIndex("Ref")
                        .HasDatabaseName("idx_raw_pipeline_ref");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_raw_pipeline_status");

                    b.HasIndex("ProjectId", "PipelineId")
                        .IsUnique()
                        .HasDatabaseName("idx_raw_pipeline_project_pipeline");

                    b.ToTable("raw_pipeline", (string)null);
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.CommitFact", b =>
                {
                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", "Developer")
                        .WithMany("Commits")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Project", "Project")
                        .WithMany("Commits")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.DeveloperAlias", b =>
                {
                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", "Developer")
                        .WithMany("Aliases")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.DeveloperMetricsAggregate", b =>
                {
                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", "Developer")
                        .WithMany("MetricsAggregates")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.MergeRequestFact", b =>
                {
                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", "AuthorDeveloper")
                        .WithMany("MergeRequests")
                        .HasForeignKey("AuthorDeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Project", "Project")
                        .WithMany("MergeRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorDeveloper");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.PipelineFact", b =>
                {
                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", "Developer")
                        .WithMany("Pipelines")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.MergeRequestFact", "MergeRequestFact")
                        .WithMany("Pipelines")
                        .HasForeignKey("MergeRequestFactId");

                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Project", "Project")
                        .WithMany("Pipelines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("MergeRequestFact");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.ReviewEvent", b =>
                {
                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.MergeRequestFact", "MergeRequestFact")
                        .WithMany("ReviewEvents")
                        .HasForeignKey("MergeRequestFactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", "ReviewerDeveloper")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("ReviewerDeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MergeRequestFact");

                    b.Navigation("ReviewerDeveloper");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Developer", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("Commits");

                    b.Navigation("MergeRequests");

                    b.Navigation("MetricsAggregates");

                    b.Navigation("Pipelines");

                    b.Navigation("ReviewsGiven");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.MergeRequestFact", b =>
                {
                    b.Navigation("Pipelines");

                    b.Navigation("ReviewEvents");
                });

            modelBuilder.Entity("Toman.Management.KPIAnalysis.ApiService.Features.GitLabMetrics.Models.Entities.Project", b =>
                {
                    b.Navigation("Commits");

                    b.Navigation("MergeRequests");

                    b.Navigation("Pipelines");
                });
#pragma warning restore 612, 618
        }
    }
}
